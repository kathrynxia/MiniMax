1. What are some time or space efficiency limitations of your current algorithm? For example, is there a certain number of initial pieces for which your algorithm will not be able to finish executing in a reasonable amount of time?

This algorithm is not the most efficient for multiple piles and piles with large numbers of pieces. I noticed this when testing out my code, in which the random boards that had more piles and higher numbers took a while to “choose” a move. I noticed a lot of lagging when there were around 10 piles, and that approaching the high teens and 20s, the algorithm would become much slower, taking at least more than a minute to choose a move, which is a long time to wait for an inpatient person like me. At higher and higher numbers, it could take many minutes to choose a move, which is an unreasonable amount of time to take per turn. This is because, when looking at it from a game tree perspective, it has to test every more and more possible move in each game, and the more possibilities there are, the longer it takes to reach the base case, therefore increasing computing time. 


2. Will your bot win EVERY possible game of SimpleNim? (Hint: Probably not!) Explain why.

While if there is an advantage/opening for winning, the algorithm will certainly take it, the random piles generated make it so that if both players play perfectly, the winner is determined by whoever goes first. So, depending on the configuration of the game, if the other player plays perfectly, it comes down to chance. However, human players make mistakes, so if the human player makes a mistake, the algorithm will win. If this algorithm were playing against another machine/itself, then the outcome would be purely determined by the number of piles, the number of pieces in each pile, and whoever goes first. 



3. Nim is known as a mis`ere game, meaning that the goal is to avoid taking the last piece. Say we changed the rules so that the player who takes the last piece wins instead of losing. How would you change your code to give the best move for this AntiNim game? Be as specific as possible, citing file names and line numbers.

I would change, first of all, the base case. I would swat the values, for example, if the ArrayList contained only 0s in RegNimRunner.java in the minimax function on lines 96-101, if myTurn would be true it would return -1, and if false it would return 1. Then, I would try to make sure the rest of the code tried to select the best move that would ensure they would take the last piece. For example, if there was one pile left, they would take the whole pile, and if there was one piece left, they would take it. 


4.  Give one example of a non-Nim game you expect your algorithm would NOT work well on. Explain why.

One example of a game that my algorithm would not work well for is games where draws are possible. According to this algorithm, the recursion relies on the fact that it is a zero-sum game with only one winner. If draws were possible, such as with chess, the algorithm would not know how to handle the tie. Another reason this algorithm would not work well for chess is that chess has a much more complicated game map than nim. The branching factor for chess would be enormous, with 16 pieces, each of them capable of moving in different directions, orientations, and amounts. The branching factor already would be over a hundred, and as the game tree expanded, it would grow exponentially to have millions of possibilities. Testing each possible move would not be efficient, in fact, with my broken laptop, it would crash while testing out the number of possibilities. Since my algorithm tests every possibility, the algorithm would not be an efficient choice. 
